// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package api

import (
	fmt "fmt"
	fastpb "github.com/cloudwego/fastpb"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

func (x *RunJobRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RunJobRequest[number], err)
}

func (x *RunJobRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OnFireLogID, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *RunJobRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Job
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Job = &v
	return offset, nil
}

func (x *Job) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Job[number], err)
}

func (x *Job) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.GlueType, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Job) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	if x.Source == nil {
		x.Source = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Source[key] = value
	return offset, nil
}

func (x *Job) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.Param == nil {
		x.Param = make(map[string]string)
	}
	var key string
	var value string
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			value, offset, err = fastpb.ReadString(buf, _type)
			return offset, err
		})
	if err != nil {
		return offset, err
	}
	x.Param[key] = value
	return offset, nil
}

func (x *Job) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.ExecutorExecuteTimeoutMs, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RunJobResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RunJobResponse[number], err)
}

func (x *RunJobResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.OnFireLogID, offset, err = fastpb.ReadUint32(buf, _type)
	return offset, err
}

func (x *RunJobResponse) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v JobResult
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Result = &v
	return offset, nil
}

func (x *JobResult) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_JobResult[number], err)
}

func (x *JobResult) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Ok, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *JobResult) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Err, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *JobResult) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Result, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *HeartBeatRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *HeartBeatResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HeartBeatResponse[number], err)
}

func (x *HeartBeatResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v HealthStatus
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.HealthStatus = &v
	return offset, nil
}

func (x *HealthStatus) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_HealthStatus[number], err)
}

func (x *HealthStatus) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Workload, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *HealthStatus) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.GracefulStopped, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *RunJobRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RunJobRequest) fastWriteField1(buf []byte) (offset int) {
	if x.OnFireLogID == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOnFireLogID())
	return offset
}

func (x *RunJobRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Job == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetJob())
	return offset
}

func (x *Job) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Job) fastWriteField1(buf []byte) (offset int) {
	if x.GlueType == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetGlueType())
	return offset
}

func (x *Job) fastWriteField2(buf []byte) (offset int) {
	if x.Source == nil {
		return offset
	}
	for k, v := range x.GetSource() {
		offset += fastpb.WriteMapEntry(buf[offset:], 2,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Job) fastWriteField3(buf []byte) (offset int) {
	if x.Param == nil {
		return offset
	}
	for k, v := range x.GetParam() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteString(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteString(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *Job) fastWriteField4(buf []byte) (offset int) {
	if x.ExecutorExecuteTimeoutMs == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetExecutorExecuteTimeoutMs())
	return offset
}

func (x *RunJobResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *RunJobResponse) fastWriteField1(buf []byte) (offset int) {
	if x.OnFireLogID == 0 {
		return offset
	}
	offset += fastpb.WriteUint32(buf[offset:], 1, x.GetOnFireLogID())
	return offset
}

func (x *RunJobResponse) fastWriteField2(buf []byte) (offset int) {
	if x.Result == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetResult())
	return offset
}

func (x *JobResult) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *JobResult) fastWriteField1(buf []byte) (offset int) {
	if !x.Ok {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetOk())
	return offset
}

func (x *JobResult) fastWriteField2(buf []byte) (offset int) {
	if x.Err == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetErr())
	return offset
}

func (x *JobResult) fastWriteField3(buf []byte) (offset int) {
	if x.Result == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetResult())
	return offset
}

func (x *HeartBeatRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *HeartBeatResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *HeartBeatResponse) fastWriteField1(buf []byte) (offset int) {
	if x.HealthStatus == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetHealthStatus())
	return offset
}

func (x *HealthStatus) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *HealthStatus) fastWriteField1(buf []byte) (offset int) {
	if x.Workload == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 1, x.GetWorkload())
	return offset
}

func (x *HealthStatus) fastWriteField2(buf []byte) (offset int) {
	if !x.GracefulStopped {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 2, x.GetGracefulStopped())
	return offset
}

func (x *RunJobRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RunJobRequest) sizeField1() (n int) {
	if x.OnFireLogID == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOnFireLogID())
	return n
}

func (x *RunJobRequest) sizeField2() (n int) {
	if x.Job == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetJob())
	return n
}

func (x *Job) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Job) sizeField1() (n int) {
	if x.GlueType == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetGlueType())
	return n
}

func (x *Job) sizeField2() (n int) {
	if x.Source == nil {
		return n
	}
	for k, v := range x.GetSource() {
		n += fastpb.SizeMapEntry(2,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Job) sizeField3() (n int) {
	if x.Param == nil {
		return n
	}
	for k, v := range x.GetParam() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeString(numTagOrKey, k)
				n += fastpb.SizeString(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *Job) sizeField4() (n int) {
	if x.ExecutorExecuteTimeoutMs == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetExecutorExecuteTimeoutMs())
	return n
}

func (x *RunJobResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *RunJobResponse) sizeField1() (n int) {
	if x.OnFireLogID == 0 {
		return n
	}
	n += fastpb.SizeUint32(1, x.GetOnFireLogID())
	return n
}

func (x *RunJobResponse) sizeField2() (n int) {
	if x.Result == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetResult())
	return n
}

func (x *JobResult) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *JobResult) sizeField1() (n int) {
	if !x.Ok {
		return n
	}
	n += fastpb.SizeBool(1, x.GetOk())
	return n
}

func (x *JobResult) sizeField2() (n int) {
	if x.Err == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetErr())
	return n
}

func (x *JobResult) sizeField3() (n int) {
	if x.Result == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetResult())
	return n
}

func (x *HeartBeatRequest) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *HeartBeatResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *HeartBeatResponse) sizeField1() (n int) {
	if x.HealthStatus == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetHealthStatus())
	return n
}

func (x *HealthStatus) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *HealthStatus) sizeField1() (n int) {
	if x.Workload == 0 {
		return n
	}
	n += fastpb.SizeFloat(1, x.GetWorkload())
	return n
}

func (x *HealthStatus) sizeField2() (n int) {
	if !x.GracefulStopped {
		return n
	}
	n += fastpb.SizeBool(2, x.GetGracefulStopped())
	return n
}

var fieldIDToName_RunJobRequest = map[int32]string{
	1: "OnFireLogID",
	2: "Job",
}

var fieldIDToName_Job = map[int32]string{
	1: "GlueType",
	2: "Source",
	3: "Param",
	4: "ExecutorExecuteTimeoutMs",
}

var fieldIDToName_RunJobResponse = map[int32]string{
	1: "OnFireLogID",
	2: "Result",
}

var fieldIDToName_JobResult = map[int32]string{
	1: "Ok",
	2: "Err",
	3: "Result",
}

var fieldIDToName_HeartBeatRequest = map[int32]string{}

var fieldIDToName_HeartBeatResponse = map[int32]string{
	1: "HealthStatus",
}

var fieldIDToName_HealthStatus = map[int32]string{
	1: "Workload",
	2: "GracefulStopped",
}
